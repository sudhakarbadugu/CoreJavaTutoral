-------------------------------------------------------------
03-07-2018 Tuesday
-------------------------------------------------------------
1. Install java
	
2. Verify java installation
	1. By manual process
		Go c drive -> program files -> java

		Program files --> 64 bit os
		Program files(x86) --> 32bit os
	
or
	open cmd prompt
	cmd -> type java and enter
	
	2. Verify java version by typing below command in cmd
		java -version 
			YOu should see the below screen.	
			java version "1.8.0_162"
			Java(TM) SE Runtime Environment (build 1.8.0_162-b12)
			Java HotSpot(TM) 64-Bit Server VM (build 25.162-b12, mixed mode)

Opening cmd promps
	1. win + type cmd 
	2. win+R and type cmd
	3. shift + right click -> Open powershell window option here.
---------------------------------------------------------------------
1. All files must end with .java extension.
---------------------------------------------------------------------
04-07-2018	Wednesday
---------------------------------------------------------------------
What is Java?

What are java editons?
--------------------------------
What is Java?
Java:
	- Java is high level, object oriented programming language. 
	- It is an API and it is an Open source.
  program:
	- Set of line which performs a task.	E.g Adding 2 numbers
	
  Object:
	- Any things which is existing in the real world. E.g: A dog
		- properties: which it has. 	E.g: A dog has 4 legs, A man has 2 legs
		- Actions:	which it can performs	E.g: it can bow bow.
	
  API: Application Programming Interface
	- A set of guide lines with classes and interfaces

  Open source:
	- Freely available. 

	
What are java editons?
Types:
1. JSE: Java Standard Edison
2. J2EE: Java Enterprise Edition
3. J2ME: Java Micro Edition
4. JavaFx


1. Java SE: Java Standard Edison
	- Basics programming
	- standalone appliations: It will run only on a machine.
	- we can't write web applicatons.
	
2. J2EE: Java Enterprise Edition
	- To write web appliations.
		- which runs on the internet
			E.g: internet banking, whatapp web, facebook
	
3. J2ME: Java Micro Edition
	- Create mobiles applications.
	
4. JavaFx
	- To create the internet applications.
---------------------------------------------------------------------
05-07-2018 Thursday
---------------------------------------------------------------------
What are the java versions and History?
James Gosling , Mike Sheridan, and Patrick Naughton started java language project in 1991.
- first java named as Greentalk.
- then they renamed as Oak. Oak - strength. Other company registered with oak technoloy so they changed to Java.
- They named as Java.
- Java is only a name and abbrevation.
- Sun micro systems developed java technoloy.
- JDK 1.0 released in(January 23, 1996).

Java Version History
There are many java versions that has been released. Current stable release of Java is Java SE 10.

JDK Alpha and Beta (1995)
JDK 1.0 (23rd Jan, 1996)
JDK 1.1 (19th Feb, 1997)
J2SE 1.2 (8th Dec, 1998)
J2SE 1.3 (8th May, 2000)
J2SE 1.4 (6th Feb, 2002)
J2SE 5.0 (30th Sep, 2004)
Java SE 6 (11th Dec, 2006)
Java SE 7 (28th July, 2011)
Java SE 8 (18th March, 2014)
Java
 SE 9 (21st Sep, 2017)
Java SE 10 (20th March, 2018)

What we can do with Java?
- We can create web applications.
- we can create games.
- we create android apps.
- we can use java in televisions and setup boxes
- we can create mobile applications.

What are the features?
-- Once learn the basic programs
---------------------------------------------------------------------
Basics
- Simple java program

Reserved/keyword words: 51
	- It has some meaning to java compiler. All reserved words in small letters only.
1. class - to declare a class.
2. public - 
3. static - 
4. void - 

5. byte - 1byte -127 to 127
6. short	- 2bytes 
7. int 		-  4 bytes
8. long		- 8 bytes
9. float	- 4 bytes
10. double	- 8 bytes
11. char 	- 2 bytes
12. boolean - true/false

13. true
14. false 

15. if
16. else 
17. switch
18. case
19. break


how to compile
	javac filename.java
	E.g: javac welcome.java

How to run a java program
	Syntax: java classname
	E.g: java A	
	
task:
1. Write a program. HelloWorld.
	print out: Hello Murali, welcome to chennai.
	
-----------------------------------------
0-07-2018
-----------------------------------------
How to write a java program?
- A file with .java extension called a java file.

How to compile a java program?
- javac file name with extension
	E.G: javac Addition.java
	
How to run a java program?
	Syntax: java classname
	java Addition
	
What is platform independant?
JRE, JDK and JVM?
- Same program will run in linux, windows without recompiling it. It runs on anywhere.

Tasks:
- Write a-z java files and compile them?

-------------------------------------------------------
07-7-2018 Saturday
-------------------------------------------------------
Building blocks:
1. Class
2. variables
3. methods
4. constructors.
5. blocks.

how to declare a java class?
1. Class:
	- using class keyword we can declare a class.
	Syntax: 
	class Addition {
	}

	- All building blocks (variables, blocks, constructors and methods) should be inside a class. if we are declaring out side, compiler will give you an error. 
		Welcome.java:5: error: class, interface, or enum expected
		int i = 10;
		^
		1 error

2. variables:

------------------------------------------------------
09-07-2018 Monday
------------------------------------------------------
Identifiers: A name of class or variable or a method name called identifier.
	class Test {
	}
	
	eg: Here Test is identifier. It is a name of a class.
	
- A name of variable.
	int salary = 20000;
	-------------------
	int - datatype
	salary - variable name - identifier
	200000 - value/literal.
	
- A name of method.
	public static void main(String args[]){}
	--------
	main - name of a method.
	args - variable - identifier

Identifier naming rules:
class:
	- It should start capital letter and camel case.
		MethodExample

Method/variable:
	- It should start small letter and came case
		int length;
		methodOne(){}
		int a[]; a.length
-------------------------------------------------------------
Data types:
Pre defined data type or primitive data types.
1. Numeric/numbers
	1.1 Real numbers (1)
		1. byte
		2. short
		3. int
		4. long
	1.2 Fraction numers (0.2323)
		1. float
		2. double
2. boolean type
	1. boolean
3. char tye
	1. char

Data type:
which type of data it is.
	byte a = 10;`//valid
	byte b = false;	//invalid
		VariableExample.java:6: error: incompatible types: boolean cannot be converted to byte
                byte b = false;
				
1. byte:
	Range: -128 to 127
	memoryy: 1 byte = 8 bits
	E.g: byte b = 120; //valid
		 byte c = 140; //invalid: possible loss of precision
		 byte d = -130; //invalid
		 
2. short
	range -327768 to 32767
	memory: 2 bytes = 2power 16
		E.g: short s = 200;
			short s1 = 32769; //invalid possible loss of precision
			
3. int 
	range: 2147483647
	memory: 4 bytes = 2power32
		int i = 1;
		int i2 = 2000;
		int i3 = 2147493847;	//invalid
		int i4 = b + s;	//valid.

4. long	
	range: -9,223,372,036,854,775,808  to 9,223,372,036,854,775,807
	memory: 8 bytes = 2power64
	long l = i + i2;
	byte b = i+ i2;	//invalid
	
	
5. float
	4 bytes = 32 bits.
	up to 7 points it can store.
	float f  23.011232323232323234545f;
	float f1 = 220.2; //invalid, decimal values always referred as double value.
	
	
6. double 
	8 bytes = 64 bits	
	up to 14 points it can store.
	double d = 12.0;	
	double c = 12;
	double d1 = 10.0d;
	double d1 = 10.0f;
	double d3 = false;	//invalid
	
---------------------------------------------------------------
	byte --> short --> int --> long --> float --> double       |
---------------------------------------------------------------
	long l = 222222;
	float f = l;	//valid
	
	double l = 222222;
	float f = l;	//in valid
	
--------------------
7. char: 
	Range: 65636
	2bytes : 2power16
	char i = 'm';
	char b = 'Z';
	char c = 'A' or 65;
	char d = 100; //valid
	char e = 666666; //invalid

8. boolean
	boolean b = true;
	boolean c = false;

--------------------------------------------------------------
String:
It is a class.
	String name = "Sudhakar";
	String s = 100;	//invalid 	CE: incompatible types
	String s2 = "200";
	
Tasks:
	take a class and print the values -> PrintValues
	
		- name
		- age
		- dob
		- father name
		- village name 
		- income
		
2. write programs for sum, substraction, div and mul for int, long and double.
------------------------------------------------------------------

Identifiers Naming rules:-
1. Only a-z, 0-9,_ and $ allowed in identifiers.
	int age = 20;
	int #age = 30;	//invalid
	int age$ = 40;	
	int man age = 50; //invalid: Space should not be there in identifier
				//Error: 
	
2. Name should not start with numbers.
	int sno1 = 20;
	int sno2 = 30;
	int 1sno = 10;	//invalid
	int man_age = 20;
	int $age = 60;
	
3. should not use reserved words.
4. Name should not contain any white spaces
----------------------------------------------------------------
Control statements:
if
if else
else if

1. if 
	If we have only one condition, then should go for if case.
	E.g: Print whether given number is even
		if(xx){
		}
xx - only boolean type or boolean result
	if(i % 2 == 0){}	//
			
2. if else
	If we want show something when if condition is failed, means we have 2 condtions. 
		if(age > 18){
			SOP("You are elegible for vote");
		}
		else{
			//you are not elegible
		}
		
3. else if
	If we have more than 2 condions , then we should go for else if.
		if(condition){
		}
		else if(condions){
		
		}
		else if(condions){
		
		}else {	//optional
		
		}
--------------------------------------------------------------------
3. switch
	If we have more than 2 condions , then we should go for switch.
	
	switch(xx){	//
	}
xx - should be byte, short, int, char, String, boolean, enum.
		int i = 10;
		switch(i){
		}
Not allowed in case arguments - float, long, double.

case: each condition is called as case.


switch(xx){
	case 1: {
	}
	
	case 2: {
	}
	default: {
	}
}
points:
- syntax: 
	switch(xx){
		case 1: {
		}
		
		case 2: {
		}
		default: {
		}
	}
1. xx - byte, short, int , String, enum and boolean
2. cases are optional. even default also optional.
3. case can be in any order. e.g: case 3: case 2: default
4. case label duplicates not allowed.
5. default optional.
6. arguments (xx) and case lables (1, 2) must be same type. 
7. break - to stop the next case execution. break optional.
8. Between 2 cases nothing is allowed. 
9. break should be used only in switch.

Assignment
write below program:
String name ="Sudha";

sudha: 27
mural: 21
venky 24
ashok: 27
prasad: 21

switch(name){
}
---------------------------------------------------
26-7-18 Iterative statements or loops
-------------------------------
1. for
2. while
3. do while

Syntax:
	for(i;c;id){
		body
	}
	i -- init:
		int i = 1;
	c -- condition  always true/false
		i < 10 --> true/false
	id -- increment/decrement
		i++	/ ++i / i = i+1
		i--	/ --i

1. init - optional
2. condition - optional -- true
3. incr/decrement - optional

flow:
	for(1;2 ;4) {
		3
	}
	Sop("compeleted");
	
	
	1 - init 
	2 - conditon
	3 - body
	4 - increment
-----------------------------------------
27-07-18 while
-----------------------------------------
Syntax:
	while(conidtion){
		//body
	}
	
	condition: alwasys boolean value/expression.
- if condition is true, while body will be executed.
- while - condition is mandatory.
- while will not execute if condition is wrong.

do while:
---------
syntax;
	do {
		//Body
	}while(condition);
	
- do will execute atleast once even if condition wrong.
- break - we can use in loops also.

--------------------------------------------
29-07-18	Operators
--------------------------------------------
1. Unary Operator,
2. Arithmetic Operator,
3. Shift Operator,
4. Relational Operator,
5. Bitwise Operator,
6. Logical Operator,
7. Ternary Operator and
8. Assignment Operator.

Unary Operator:
	1. pre increment
	2. pre decrement
	3. post increment
	4. post decrement
	5. ~
	6. !

1. pre increment: First increment will happen
	++x;
	 int x = 10;
	 
	 ++x; //11
	 
2. pre decrement: First decrement will happen
	--x;
	int y = 20;
	--y; //19

3. post increment: It will not increment in the current line, incrment will happen in second.
	 int x = 10;
	 Sop(x++); 10
	 Sop(x); 11
	 
	 
4. pre decrement: It will not decrement in the current line, decrement will happen in second.
	int y = 10;
	 Sop(y--); 10
	 Sop(y); 9
	 
5. not operator (!)
- It applialbe for only boolean type.
	Eg. boolean b = false;
	boolean c = !b;	//true
	int i = 10;
	int j = !i; //ce: \UnaryOperatorsDemo.java:21: error: bad operand type int for unary operator '!'
                System.out.println(!c);

6. ~ tilde operator:
- Only number types
	E.g: int y = 20;
		int z = ~y; //-21
		int x = ~z; //20
		boolean a = ~true; ce: .\UnaryOperatorsDemo.java:21: error: bad operand type boolean for unary operator '~'
                System.out.println(~value);
				

2.1 Arithmetic operators
	int a = 10;
	int b = 3;
	+	= a + b; 13
	-   = a -b; 7
	*   = a * b; 30
	/	= a/b; 3
	%	= a%b; 1
	
3. Relational operators
	int a = 20;
	int b = 30;
	<	==> a < b == true
	>	=> a> b	==false
	<=	=> a <=b == true
	>=	=> a >= b = false 
	==	=> a == b == false 
	!=	=> a != b == true
	
4. Logical operatos:
	Double AND &&
	doble OR || 
	
	&& -> if both conditions are true then only it will be true.
		- If first condition is true then only second condition will be executed.
		
		int x = 30;
		
		if( x > 20 && x < 30){	//total result false. 1st condition is true but second condition is false so result is false.
			System.out.println("more than 20 and less then 30");
		}
		
	|| -> if both conditions are false then only it will be false, in all other scenarios it will be true.
		- If first condition is true then second condion will not be execued.
		int x = 25;
		if( x > 20 || x < 30){
			System.out.println("or operator more than 20 or less then 30");
		}
		
Ternary operator;
	?:
E.g:
	int y = 1;
	
	int age = y <0 ? 0 : y;
	System.out.println(age);
	
Bitwise operators:
&	- true & true = true 
	- true & false = false
	- false & false = false
	
|	- true | true = true 
	- true | false = true
	- false | false = false
	
^ 
- this is applicable only for numbers
-----------------------------------------------------------
30-7-18 Arrays
-----------------------------------------------------------
int r1 = 1;
int r2 = 2;
int r3 = 3;
int r4 = 4;
.
.
int r100 = 100;

Array:
- To store group of homogenious (same type) values.
- Size/length is fixed.
- Array is index based. the index starts 0 and last index is size-1.
- If we are trying to get the value from array where index is greater than size, then ArrayIndexOutOfBoundsexception will occur.

	syntax: array declaration:
	int[] rollNos = new int[size];
size -- always integer
Steps:
1. array declaration.
	int[] rollnos = new int[30];

2. array initilization
	rollnos[0] = 100;
	rollnos[29] = 130;
	
3. Display the array data
	for(int i = 0; i < rollnos.length ; i++){
		Sop(rollnos[i])
	}

--------------------
int a;
a = 20;

- Array can initilized in 2 lines as give below.
int[] a;

a = new int[10];
a[0] = 1;


- Array declaration and initilization in one line
	int[] numbers = {1,5,7,5,5,5,6};
--------------------

foreach loop:
--------------------

for(datatype identifier: arrayName){
  Sop(identifier);
}

----------------------------------------------|
 OOPS 01-08-2018
----------------------------------------------|
methods:
-------
- A group of statements which does a task.

public void m1(){
}

public - access specfier
void - return type - returns nothing.
m1 - method name 
--------------------------------
java 2 types:
1. Instance method.
2. static method.

1. Instance method:
	A method which is not declared with static keyword called instance method.
	public void m1(){}


	Steps:
	1. Declare a method in a class.
		public void m1(){
			Sop("m1");
		}
	2. Calling m1 method.
		1. Create a object for that class where method exist.
			MethodExample object = new MethodExample();
		2. Call the method using object.
			object.m1();
		
2. Static method:
	A method which is declared with static keyword called static method.
	public static void m1(){}
	
	1. Declare a static method in a class.
		public static void m2(){
			Sop("m2 static");
		}
	2. Calling m1 method.
		1. Using Class.methodname we can call static method.
		MethodExample.m2();
